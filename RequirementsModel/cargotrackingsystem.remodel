UseCaseModel CargoTrackingSystem {

	UC::createLocation "Create Location"
	UC::viewTracking "View Tracking" definedBySSD(ViewTrackingSSD) relatedService(ViewTrackingService)
	UC::viewCargos "View Cargos"
	UC::bookCargo "Book Cargo"
	UC::changeCargoDestination "Change Cargo Destination"
	UC::routeCargo "Route Cargo"
	UC::createVoyage "Create Voyage"
	UC::addCarrierMovement "Add Carrier Movement"
	UC::handleCargoEvent "Handle Cargo Event"

	Actor Customer {
		viewTracking
	}

	Actor Admin {
		createLocation
	}

	Actor CargoPlanner {
		viewCargos
		bookCargo
		changeCargoDestination
		routeCargo
	}

	Actor VoyageManager {
		createVoyage
		addCarrierMovement
	}

	Actor CargoTracker {
		handleCargoEvent
	}

	Interaction ViewTrackingSSD {

		[Participants: Customer ViewTrackingService]

		CallMessage::ViewTrackingSSDCallMessage1(getCargoInfo ViewTrackingSSDCallMessage1SendingEnd -> ViewTrackingSSDExecution1StartEnd)
		ReturnMessage::ViewTrackingSSDCallMessage1Return(ViewTrackingSSDExecution1FinishEnd -> ViewTrackingSSDCallMessage1ReturnReceivingEnd ViewTrackingSSDCallMessage1)

		Execution::ViewTrackingSSDExecution1(ViewTrackingService ViewTrackingSSDExecution1StartEnd ViewTrackingSSDExecution1FinishEnd)

		MessageEnd::ViewTrackingSSDCallMessage1SendingEnd(Customer ViewTrackingSSDCallMessage1)
		ExecutionEnd::ViewTrackingSSDExecution1StartEnd(ViewTrackingService ViewTrackingSSDExecution1)
		ExecutionEnd::ViewTrackingSSDExecution1FinishEnd(ViewTrackingService ViewTrackingSSDExecution1)
		MessageEnd::ViewTrackingSSDCallMessage1ReturnReceivingEnd(Customer ViewTrackingSSDCallMessage1Return)

	}

	Service CargoTrackingSystemSystem {

	}

	Service ThirdPartyServices {

	}

	Service ViewTrackingService {

		[Operation]
		getCargoInfo(trackingID)

		[TempProperty]
		CurrentCargoInfo : String

	}

	Contract ViewTrackingService::getCargoInfo(trackingID : String) : String {

		definition:
			cargo:Cargo = Cargo.allInstance()->any(cargo:Cargo | cargo.TrackingID = trackingID)

		precondition:
			cargo.oclIsUndefined() = false

		postcondition:
			CurrentCargoInfo = cargo.Info and
			if
				(cargo.Goal.oclIsUndefined() = false)
			then
				CurrentCargoInfo = CurrentCargoInfo + cargo.Goal
			endif and
			if
				(cargo.DeliveryHistory.oclIsUndefined() = false)
			then
				CurrentCargoInfo = CurrentCargoInfo + cargo.DeliveryHistory
			endif and
			result = CurrentCargoInfo
	}

}

DomainModel CargoTrackingSystem {

	Entity Cargo {
		TrackingId : String

		[Refer]
	}

	Entity Location {
		UnLocode : String
	Name : String
	}

	Entity HandlingEvent {
		OperationType : OperationType[LOAD|UNLOAD|PICKUP]
		CompletionTime : Date
		RegistrationTime : Date

		[Refer]
		Handled : Cargo* Association
		EventtoMovement : CarrierMovement Association
	Location : Location Association
	}

	Entity CarrierMovement {
		DepartureTime : Date
		ArrivalTime : Date

		[Refer]
		DepartureLocation : Location Association
		ArrivalLocation : Location Association
	}

	Entity User {
		Name : String
		UserID : String
	Role : String
	}

	Entity RouteSpecification {
		Origin : String
		Destination : String
		ArrivalDeadline : Date
	}

	Entity Itinerary {
		IeneraryNumber : String
	}

	Entity Voyage {
		VoyageNumber : String
	}

	Entity Leg {
		LoadTime : Date
		UnloadTime : Date

		[Refer]
		LoadLocation : Location Association
		UnloadLocation : Location Association
	}

	Entity Delivery {
		TransportStatus : TransportStatus[MISDIRECTED|NOTMISDIRECTED]
		Unloaded : Boolean
		EstimatedArrivalDate : Date
		RoutingStatus : String
	}

}

