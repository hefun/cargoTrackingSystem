UseCaseModel CargoTrackingSystem {

	UC::createLocation "Create Location" definedBySSD(CreateLocationSSD) relatedService(CreateLocationService)
	UC::viewTracking "View Tracking" definedBySSD(ViewTrackingSSD) relatedService(ViewTrackingService)
	UC::viewCargos "View Cargos" definedBySSD(ViewCargosSSD) relatedService(ViewCargosService)
	UC::bookCargo "Book Cargo"
	UC::changeCargoDestination "Change Cargo Destination"
	UC::routeCargo "Route Cargo"
	UC::createVoyage "Create Voyage" definedBySSD(CreateVoyageSSD) relatedService(CreateVoyageService)
	UC::addCarrierMovement "Add Carrier Movement"
	UC::handleCargoEvent "Handle Cargo Event"

	Actor Customer {
		viewTracking
	}

	Actor Admin {
		createLocation
	}

	Actor CargoPlanner {
		viewCargos
		bookCargo
		changeCargoDestination
		routeCargo
	}

	Actor VoyageManager {
		createVoyage
		addCarrierMovement
	}

	Actor CargoTracker {
		handleCargoEvent
	}

	Interaction ViewTrackingSSD {

		[Participants: Customer ViewTrackingService]

		CallMessage::ViewTrackingSSDCallMessage1(getCargoInfo ViewTrackingSSDCallMessage1SendingEnd -> ViewTrackingSSDExecution1StartEnd)
		ReturnMessage::ViewTrackingSSDCallMessage1Return(ViewTrackingSSDExecution1FinishEnd -> ViewTrackingSSDCallMessage1ReturnReceivingEnd ViewTrackingSSDCallMessage1)

		Execution::ViewTrackingSSDExecution1(ViewTrackingService ViewTrackingSSDExecution1StartEnd ViewTrackingSSDExecution1FinishEnd)

		MessageEnd::ViewTrackingSSDCallMessage1SendingEnd(Customer ViewTrackingSSDCallMessage1)
		ExecutionEnd::ViewTrackingSSDExecution1StartEnd(ViewTrackingService ViewTrackingSSDExecution1)
		ExecutionEnd::ViewTrackingSSDExecution1FinishEnd(ViewTrackingService ViewTrackingSSDExecution1)
		MessageEnd::ViewTrackingSSDCallMessage1ReturnReceivingEnd(Customer ViewTrackingSSDCallMessage1Return)

	}

	Interaction CreateLocationSSD {

		[Participants: Admin CreateLocationService]

		CallMessage::CreateLocationSSDCallMessage1(inputLocationCode CreateLocationSSDCallMessage1SendingEnd -> CreateLocationSSDExecution1StartEnd)
		ReturnMessage::CreateLocationSSDCallMessage1Return(CreateLocationSSDExecution1FinishEnd -> CreateLocationSSDCallMessage1ReturnReceivingEnd CreateLocationSSDCallMessage1)
		CallMessage::CreateLocationSSDCallMessage3(inputLocationName CreateLocationSSDCallMessage3SendingEnd -> CreateLocationSSDExecution2StartEnd)
		ReturnMessage::CreateLocationSSDCallMessage3Return(CreateLocationSSDExecution2FinishEnd -> CreateLocationSSDCallMessage3ReturnReceivingEnd CreateLocationSSDCallMessage3)

		Execution::CreateLocationSSDExecution1(CreateLocationService CreateLocationSSDExecution1StartEnd CreateLocationSSDExecution1FinishEnd)
		Execution::CreateLocationSSDExecution2(CreateLocationService CreateLocationSSDExecution2StartEnd CreateLocationSSDExecution2FinishEnd)

		MessageEnd::CreateLocationSSDCallMessage1SendingEnd(Admin CreateLocationSSDCallMessage1)
		ExecutionEnd::CreateLocationSSDExecution1StartEnd(CreateLocationService CreateLocationSSDExecution1)
		ExecutionEnd::CreateLocationSSDExecution1FinishEnd(CreateLocationService CreateLocationSSDExecution1)
		MessageEnd::CreateLocationSSDCallMessage1ReturnReceivingEnd(Admin CreateLocationSSDCallMessage1Return)
		MessageEnd::CreateLocationSSDCallMessage3SendingEnd(Admin CreateLocationSSDCallMessage3)
		ExecutionEnd::CreateLocationSSDExecution2StartEnd(CreateLocationService CreateLocationSSDExecution2)
		ExecutionEnd::CreateLocationSSDExecution2FinishEnd(CreateLocationService CreateLocationSSDExecution2)
		MessageEnd::CreateLocationSSDCallMessage3ReturnReceivingEnd(Admin CreateLocationSSDCallMessage3Return)

	}

	Interaction CreateVoyageSSD {

		[Participants: VoyageManager CreateVoyageService]

		CallMessage::CreateVoyageSSDCallMessage1(setVoyageNumber CreateVoyageSSDCallMessage1SendingEnd -> CreateVoyageSSDExecution1StartEnd)
		ReturnMessage::CreateVoyageSSDCallMessage1Return(CreateVoyageSSDExecution1FinishEnd -> CreateVoyageSSDCallMessage1ReturnReceivingEnd CreateVoyageSSDCallMessage1)

		Execution::CreateVoyageSSDExecution1(CreateVoyageService CreateVoyageSSDExecution1StartEnd CreateVoyageSSDExecution1FinishEnd)

		MessageEnd::CreateVoyageSSDCallMessage1SendingEnd(VoyageManager CreateVoyageSSDCallMessage1)
		ExecutionEnd::CreateVoyageSSDExecution1StartEnd(CreateVoyageService CreateVoyageSSDExecution1)
		ExecutionEnd::CreateVoyageSSDExecution1FinishEnd(CreateVoyageService CreateVoyageSSDExecution1)
		MessageEnd::CreateVoyageSSDCallMessage1ReturnReceivingEnd(VoyageManager CreateVoyageSSDCallMessage1Return)

	}

	Interaction ViewCargosSSD {

		[Participants: CargoPlanner ViewCargosService]

		CallMessage::ViewCargosSSDCallMessage1(getAllCargoRoute ViewCargosSSDCallMessage1SendingEnd -> ViewCargosSSDExecution1StartEnd)
		ReturnMessage::ViewCargosSSDCallMessage1Return(ViewCargosSSDExecution1FinishEnd -> ViewCargosSSDCallMessage1ReturnReceivingEnd ViewCargosSSDCallMessage1)
		CallMessage::ViewCargosSSDCallMessage3(getCeratinCargoRoute ViewCargosSSDCallMessage3SendingEnd -> ViewCargosSSDExecution2StartEnd)
		ReturnMessage::ViewCargosSSDCallMessage3Return(ViewCargosSSDExecution2FinishEnd -> ViewCargosSSDCallMessage3ReturnReceivingEnd ViewCargosSSDCallMessage3)

		Execution::ViewCargosSSDExecution1(ViewCargosService ViewCargosSSDExecution1StartEnd ViewCargosSSDExecution1FinishEnd)
		Execution::ViewCargosSSDExecution2(ViewCargosService ViewCargosSSDExecution2StartEnd ViewCargosSSDExecution2FinishEnd)

		MessageEnd::ViewCargosSSDCallMessage1SendingEnd(CargoPlanner ViewCargosSSDCallMessage1)
		ExecutionEnd::ViewCargosSSDExecution1StartEnd(ViewCargosService ViewCargosSSDExecution1)
		ExecutionEnd::ViewCargosSSDExecution1FinishEnd(ViewCargosService ViewCargosSSDExecution1)
		MessageEnd::ViewCargosSSDCallMessage1ReturnReceivingEnd(CargoPlanner ViewCargosSSDCallMessage1Return)
		MessageEnd::ViewCargosSSDCallMessage3SendingEnd(CargoPlanner ViewCargosSSDCallMessage3)
		ExecutionEnd::ViewCargosSSDExecution2StartEnd(ViewCargosService ViewCargosSSDExecution2)
		ExecutionEnd::ViewCargosSSDExecution2FinishEnd(ViewCargosService ViewCargosSSDExecution2)
		MessageEnd::ViewCargosSSDCallMessage3ReturnReceivingEnd(CargoPlanner ViewCargosSSDCallMessage3Return)

	}

	Service CargoTrackingSystemSystem {

	}

	Service ThirdPartyServices {

	}

	Service ViewTrackingService {

		[Operation]
		getCargoInfo(trackingId)

		[TempProperty]
		CurrentCargoInfo : String

	}

	Service CreateLocationService {

		[Operation]
		inputLocationCode(locationCode)
		inputLocationName(name)

	}

	Service CreateVoyageService {

		[Operation]
		setVoyageNumber(number)

	}

	Service ViewCargosService {

		[Operation]
		getAllCargoRoute()
		getCeratinCargoRoute(TrackingId)

	}

	Contract ViewTrackingService::getCargoInfo(trackingId : String) : GetCargoInfoResult {

		definition:
			c:Cargo = Cargo.allInstance()->any(c:Cargo | c.TrackingId = trackingId),
			events:Set(HandlingEvent) = HandlingEvent.allInstance()->select(handlingEvent:HandlingEvent | handlingEvent.Handled = c),
			voyages:Set(Voyage) = events->collect(h:HandlingEvent | h.Voyage)

		precondition:
			cargo.oclIsUndefined() = false

		postcondition:
			let res:GetCargoInfoResult in
			res.oclIsNew() and
			res.Events->includesAll(events) and
			res.Voyages->includesAll(voyages) and
			res.Delivery = c.Delivery and
			result = res
	}

	Contract ViewCargosService::getAllCargoRoute() : Set(RouteSpecification) {

		definition:
			routeSpecifications:Set(RouteSpecification) = Cargo.allInstance()->collect(c:Cargo | c.RouteSpecification)

		precondition:
			routeSpecifications.oclIsUndefined() = false

		postcondition:
			result = routeSpecifications

	}

}

DomainModel CargoTrackingSystem {

	Entity Cargo {
		TrackingId : String

		[Refer]
		Users : User* ! Association
		Delivery : Delivery Association
		Events : HandlingEvent* ! Association
		Itinerary : Itinerary Association
		RouteSpecification : RouteSpecification Association
	}

	Entity Location {
		UnLocode : String
		Name : String
	}

	Entity HandlingEvent {
		OperationType : OperationType[LOAD|UNLOAD|PICKUP]
		CompletionTime : Date
		RegistrationTime : Date

		[Refer]
		Handled : Cargo Association
		Location : Location Association
		Voyage : Voyage Association
	}

	Entity CarrierMovement {
		DepartureTime : Date
		ArrivalTime : Date

		[Refer]
		DepartureLocation : Location Association
		ArrivalLocation : Location Association
	}

	Entity User {
		Name : String
		UserID : String
		Role : String

		[Refer]
		Cargos : Cargo* Association
	}

	Entity RouteSpecification {
		Origin : String
		Destination : String
		ArrivalDeadline : Date
	}

	Entity Itinerary {
		IeneraryNumber : String

		[Refer]
		Step : Leg* Association
		Specification : RouteSpecification Association
	}

	Entity Voyage {
		VoyageNumber : String

		[Refer]
		CarrierMovement : CarrierMovement* Association
	}

	Entity Leg {
		LoadTime : Date
		UnloadTime : Date

		[Refer]
		LoadLocation : Location Association
		UnloadLocation : Location Association
	}

	Entity Delivery {
		TransportStatus : TransportStatus[MISDIRECTED|NOTMISDIRECTED]
		Unloaded : Boolean
		EstimatedArrivalDate : Date
		RoutingStatus : String
	}

	Entity GetCargoInfoResult {
		[Refer]
		Delivery : Delivery Association
		Events : HandlingEvent* Association
		Voyages : Voyage* Association
	}

}

