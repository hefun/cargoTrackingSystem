UseCaseModel CargoTrackingSystem {

	UC::createLocation "Create Location" definedBySSD(CreateLocationSSD) relatedService(CreateLocationService)
	UC::viewTracking "View Tracking" definedBySSD(ViewTrackingSSD) relatedService(ViewTrackingService)
	UC::viewCargos "View Cargos" definedBySSD(ViewCargosSSD) relatedService(ViewCargosService)
	UC::bookCargo "Book Cargo" definedBySSD(BookCargoSSD) relatedService(BookCargoService)
	UC::changeCargoDestination "Change Cargo Destination" definedBySSD(ChangeCargoDestinationSSD) relatedService(ChangeCargoDestinationService)
	UC::routeCargo "Route Cargo" definedBySSD(RouteCargoSSD) relatedService(RouteCargoService)
	UC::createVoyage "Create Voyage" definedBySSD(CreateVoyageSSD) relatedService(CreateVoyageService)
	UC::addCarrierMovement "Add Carrier Movement" definedBySSD(AddCarrierMovementSSD) relatedService(AddCarrierMovementService)
	UC::handleCargoEvent "Handle Cargo Event" definedBySSD(HandleCargoEventSSD) relatedService(HandleCargoEventService)

	Actor Customer {
		viewTracking
	}

	Actor Admin {
		createLocation
	}

	Actor CargoPlanner {
		viewCargos
		bookCargo
		changeCargoDestination
		routeCargo
	}

	Actor VoyageManager {
		createVoyage
		addCarrierMovement
	}

	Actor CargoTracker {
		handleCargoEvent
	}

	Interaction ViewTrackingSSD {

		[Participants: Customer ViewTrackingService]

		CallMessage::ViewTrackingSSDCallMessage1(getCargoInfo ViewTrackingSSDCallMessage1SendingEnd -> ViewTrackingSSDExecution1StartEnd)
		ReturnMessage::ViewTrackingSSDCallMessage1Return(ViewTrackingSSDExecution1FinishEnd -> ViewTrackingSSDCallMessage1ReturnReceivingEnd ViewTrackingSSDCallMessage1)

		Execution::ViewTrackingSSDExecution1(ViewTrackingService ViewTrackingSSDExecution1StartEnd ViewTrackingSSDExecution1FinishEnd)

		MessageEnd::ViewTrackingSSDCallMessage1SendingEnd(Customer ViewTrackingSSDCallMessage1)
		ExecutionEnd::ViewTrackingSSDExecution1StartEnd(ViewTrackingService ViewTrackingSSDExecution1)
		ExecutionEnd::ViewTrackingSSDExecution1FinishEnd(ViewTrackingService ViewTrackingSSDExecution1)
		MessageEnd::ViewTrackingSSDCallMessage1ReturnReceivingEnd(Customer ViewTrackingSSDCallMessage1Return)

	}

	Interaction CreateLocationSSD {

		[Participants: Admin CreateLocationService]

		CallMessage::CreateLocationSSDCallMessage1(inputLocationInfo CreateLocationSSDCallMessage1SendingEnd -> CreateLocationSSDExecution1StartEnd)
		ReturnMessage::CreateLocationSSDCallMessage1Return(CreateLocationSSDExecution1FinishEnd -> CreateLocationSSDCallMessage1ReturnReceivingEnd CreateLocationSSDCallMessage1)

		Execution::CreateLocationSSDExecution1(CreateLocationService CreateLocationSSDExecution1StartEnd CreateLocationSSDExecution1FinishEnd)

		MessageEnd::CreateLocationSSDCallMessage1SendingEnd(Admin CreateLocationSSDCallMessage1)
		ExecutionEnd::CreateLocationSSDExecution1StartEnd(CreateLocationService CreateLocationSSDExecution1)
		ExecutionEnd::CreateLocationSSDExecution1FinishEnd(CreateLocationService CreateLocationSSDExecution1)
		MessageEnd::CreateLocationSSDCallMessage1ReturnReceivingEnd(Admin CreateLocationSSDCallMessage1Return)

	}

	Interaction CreateVoyageSSD {

		[Participants: VoyageManager CreateVoyageService]

		CallMessage::CreateVoyageSSDCallMessage1(createVoyage CreateVoyageSSDCallMessage1SendingEnd -> CreateVoyageSSDExecution1StartEnd)
		ReturnMessage::CreateVoyageSSDCallMessage1Return(CreateVoyageSSDExecution1FinishEnd -> CreateVoyageSSDCallMessage1ReturnReceivingEnd CreateVoyageSSDCallMessage1)

		Execution::CreateVoyageSSDExecution1(CreateVoyageService CreateVoyageSSDExecution1StartEnd CreateVoyageSSDExecution1FinishEnd)

		MessageEnd::CreateVoyageSSDCallMessage1SendingEnd(VoyageManager CreateVoyageSSDCallMessage1)
		ExecutionEnd::CreateVoyageSSDExecution1StartEnd(CreateVoyageService CreateVoyageSSDExecution1)
		ExecutionEnd::CreateVoyageSSDExecution1FinishEnd(CreateVoyageService CreateVoyageSSDExecution1)
		MessageEnd::CreateVoyageSSDCallMessage1ReturnReceivingEnd(VoyageManager CreateVoyageSSDCallMessage1Return)

	}

	Interaction ViewCargosSSD {

		[Participants: CargoPlanner ViewCargosService]

		CallMessage::ViewCargosSSDCallMessage1(getAllCargoRoute ViewCargosSSDCallMessage1SendingEnd -> ViewCargosSSDExecution1StartEnd)
		ReturnMessage::ViewCargosSSDCallMessage1Return(ViewCargosSSDExecution1FinishEnd -> ViewCargosSSDCallMessage1ReturnReceivingEnd ViewCargosSSDCallMessage1)
		CallMessage::ViewCargosSSDCallMessage3(getCertainCargoRoute ViewCargosSSDCallMessage3SendingEnd -> ViewCargosSSDExecution2StartEnd)
		ReturnMessage::ViewCargosSSDCallMessage3Return(ViewCargosSSDExecution2FinishEnd -> ViewCargosSSDCallMessage3ReturnReceivingEnd ViewCargosSSDCallMessage3)

		Execution::ViewCargosSSDExecution1(ViewCargosService ViewCargosSSDExecution1StartEnd ViewCargosSSDExecution1FinishEnd)
		Execution::ViewCargosSSDExecution2(ViewCargosService ViewCargosSSDExecution2StartEnd ViewCargosSSDExecution2FinishEnd)

		MessageEnd::ViewCargosSSDCallMessage1SendingEnd(CargoPlanner ViewCargosSSDCallMessage1)
		ExecutionEnd::ViewCargosSSDExecution1StartEnd(ViewCargosService ViewCargosSSDExecution1)
		ExecutionEnd::ViewCargosSSDExecution1FinishEnd(ViewCargosService ViewCargosSSDExecution1)
		MessageEnd::ViewCargosSSDCallMessage1ReturnReceivingEnd(CargoPlanner ViewCargosSSDCallMessage1Return)
		MessageEnd::ViewCargosSSDCallMessage3SendingEnd(CargoPlanner ViewCargosSSDCallMessage3)
		ExecutionEnd::ViewCargosSSDExecution2StartEnd(ViewCargosService ViewCargosSSDExecution2)
		ExecutionEnd::ViewCargosSSDExecution2FinishEnd(ViewCargosService ViewCargosSSDExecution2)
		MessageEnd::ViewCargosSSDCallMessage3ReturnReceivingEnd(CargoPlanner ViewCargosSSDCallMessage3Return)

	}

	Interaction BookCargoSSD {

		[Participants: CargoPlanner BookCargoService]

		CallMessage::BookCargoSSDCallMessage1(getAllLocations BookCargoSSDCallMessage1SendingEnd -> BookCargoSSDExecution1StartEnd)
		ReturnMessage::BookCargoSSDCallMessage1Return(BookCargoSSDExecution1FinishEnd -> BookCargoSSDCallMessage1ReturnReceivingEnd BookCargoSSDCallMessage1)
		CallMessage::BookCargoSSDCallMessage3(createNewCargo BookCargoSSDCallMessage3SendingEnd -> BookCargoSSDExecution2StartEnd)
		ReturnMessage::BookCargoSSDCallMessage3Return(BookCargoSSDExecution2FinishEnd -> BookCargoSSDCallMessage3ReturnReceivingEnd BookCargoSSDCallMessage3)
		CallMessage::BookCargoSSDCallMessage5(createRouteSpecification BookCargoSSDCallMessage5SendingEnd -> BookCargoSSDExecution3StartEnd)
		ReturnMessage::BookCargoSSDCallMessage5Return(BookCargoSSDExecution3FinishEnd -> BookCargoSSDCallMessage5ReturnReceivingEnd BookCargoSSDCallMessage5)

		Execution::BookCargoSSDExecution1(BookCargoService BookCargoSSDExecution1StartEnd BookCargoSSDExecution1FinishEnd)
		Execution::BookCargoSSDExecution2(BookCargoService BookCargoSSDExecution2StartEnd BookCargoSSDExecution2FinishEnd)
		Execution::BookCargoSSDExecution3(BookCargoService BookCargoSSDExecution3StartEnd BookCargoSSDExecution3FinishEnd)

		MessageEnd::BookCargoSSDCallMessage1SendingEnd(CargoPlanner BookCargoSSDCallMessage1)
		ExecutionEnd::BookCargoSSDExecution1StartEnd(BookCargoService BookCargoSSDExecution1)
		ExecutionEnd::BookCargoSSDExecution1FinishEnd(BookCargoService BookCargoSSDExecution1)
		MessageEnd::BookCargoSSDCallMessage1ReturnReceivingEnd(CargoPlanner BookCargoSSDCallMessage1Return)
		MessageEnd::BookCargoSSDCallMessage3SendingEnd(CargoPlanner BookCargoSSDCallMessage3)
		ExecutionEnd::BookCargoSSDExecution2StartEnd(BookCargoService BookCargoSSDExecution2)
		ExecutionEnd::BookCargoSSDExecution2FinishEnd(BookCargoService BookCargoSSDExecution2)
		MessageEnd::BookCargoSSDCallMessage3ReturnReceivingEnd(CargoPlanner BookCargoSSDCallMessage3Return)
		MessageEnd::BookCargoSSDCallMessage5SendingEnd(CargoPlanner BookCargoSSDCallMessage5)
		ExecutionEnd::BookCargoSSDExecution3StartEnd(BookCargoService BookCargoSSDExecution3)
		ExecutionEnd::BookCargoSSDExecution3FinishEnd(BookCargoService BookCargoSSDExecution3)
		MessageEnd::BookCargoSSDCallMessage5ReturnReceivingEnd(CargoPlanner BookCargoSSDCallMessage5Return)

	}

	Interaction ChangeCargoDestinationSSD {

		[Participants: CargoPlanner ChangeCargoDestinationService]

		CallMessage::ChangeCargoDestinationSSDCallMessage1(selectLocation ChangeCargoDestinationSSDCallMessage1SendingEnd -> ChangeCargoDestinationSSDExecution1StartEnd)
		ReturnMessage::ChangeCargoDestinationSSDCallMessage1Return(ChangeCargoDestinationSSDExecution1FinishEnd -> ChangeCargoDestinationSSDCallMessage1ReturnReceivingEnd ChangeCargoDestinationSSDCallMessage1)
		CallMessage::ChangeCargoDestinationSSDCallMessage3(changeDestination ChangeCargoDestinationSSDCallMessage3SendingEnd -> ChangeCargoDestinationSSDExecution2StartEnd)
		ReturnMessage::ChangeCargoDestinationSSDCallMessage3Return(ChangeCargoDestinationSSDExecution2FinishEnd -> ChangeCargoDestinationSSDCallMessage3ReturnReceivingEnd ChangeCargoDestinationSSDCallMessage3)

		Execution::ChangeCargoDestinationSSDExecution1(ChangeCargoDestinationService ChangeCargoDestinationSSDExecution1StartEnd ChangeCargoDestinationSSDExecution1FinishEnd)
		Execution::ChangeCargoDestinationSSDExecution2(ChangeCargoDestinationService ChangeCargoDestinationSSDExecution2StartEnd ChangeCargoDestinationSSDExecution2FinishEnd)

		MessageEnd::ChangeCargoDestinationSSDCallMessage1SendingEnd(CargoPlanner ChangeCargoDestinationSSDCallMessage1)
		ExecutionEnd::ChangeCargoDestinationSSDExecution1StartEnd(ChangeCargoDestinationService ChangeCargoDestinationSSDExecution1)
		ExecutionEnd::ChangeCargoDestinationSSDExecution1FinishEnd(ChangeCargoDestinationService ChangeCargoDestinationSSDExecution1)
		MessageEnd::ChangeCargoDestinationSSDCallMessage1ReturnReceivingEnd(CargoPlanner ChangeCargoDestinationSSDCallMessage1Return)
		MessageEnd::ChangeCargoDestinationSSDCallMessage3SendingEnd(CargoPlanner ChangeCargoDestinationSSDCallMessage3)
		ExecutionEnd::ChangeCargoDestinationSSDExecution2StartEnd(ChangeCargoDestinationService ChangeCargoDestinationSSDExecution2)
		ExecutionEnd::ChangeCargoDestinationSSDExecution2FinishEnd(ChangeCargoDestinationService ChangeCargoDestinationSSDExecution2)
		MessageEnd::ChangeCargoDestinationSSDCallMessage3ReturnReceivingEnd(CargoPlanner ChangeCargoDestinationSSDCallMessage3Return)

	}

	Interaction RouteCargoSSD {

		[Participants: CargoPlanner RouteCargoService]

		CallMessage::RouteCargoSSDCallMessage1(routeCargo RouteCargoSSDCallMessage1SendingEnd -> RouteCargoSSDExecution1StartEnd)
		ReturnMessage::RouteCargoSSDCallMessage1Return(RouteCargoSSDExecution1FinishEnd -> RouteCargoSSDCallMessage1ReturnReceivingEnd RouteCargoSSDCallMessage1)

		Execution::RouteCargoSSDExecution1(RouteCargoService RouteCargoSSDExecution1StartEnd RouteCargoSSDExecution1FinishEnd)

		MessageEnd::RouteCargoSSDCallMessage1SendingEnd(CargoPlanner RouteCargoSSDCallMessage1)
		ExecutionEnd::RouteCargoSSDExecution1StartEnd(RouteCargoService RouteCargoSSDExecution1)
		ExecutionEnd::RouteCargoSSDExecution1FinishEnd(RouteCargoService RouteCargoSSDExecution1)
		MessageEnd::RouteCargoSSDCallMessage1ReturnReceivingEnd(CargoPlanner RouteCargoSSDCallMessage1Return)

	}

	Interaction AddCarrierMovementSSD {

		[Participants: VoyageManager AddCarrierMovementService]

		CallMessage::AddCarrierMovementSSDCallMessage1(addCarrierMovement AddCarrierMovementSSDCallMessage1SendingEnd -> AddCarrierMovementSSDExecution1StartEnd)
		ReturnMessage::AddCarrierMovementSSDCallMessage1Return(AddCarrierMovementSSDExecution1FinishEnd -> AddCarrierMovementSSDCallMessage1ReturnReceivingEnd AddCarrierMovementSSDCallMessage1)

		Execution::AddCarrierMovementSSDExecution1(AddCarrierMovementService AddCarrierMovementSSDExecution1StartEnd AddCarrierMovementSSDExecution1FinishEnd)

		MessageEnd::AddCarrierMovementSSDCallMessage1SendingEnd(VoyageManager AddCarrierMovementSSDCallMessage1)
		ExecutionEnd::AddCarrierMovementSSDExecution1StartEnd(AddCarrierMovementService AddCarrierMovementSSDExecution1)
		ExecutionEnd::AddCarrierMovementSSDExecution1FinishEnd(AddCarrierMovementService AddCarrierMovementSSDExecution1)
		MessageEnd::AddCarrierMovementSSDCallMessage1ReturnReceivingEnd(VoyageManager AddCarrierMovementSSDCallMessage1Return)

	}

	Interaction HandleCargoEventSSD {

		[Participants: CargoTracker HandleCargoEventService]

		CallMessage::HandleCargoEventSSDCallMessage1(createLoadEvent HandleCargoEventSSDCallMessage1SendingEnd -> HandleCargoEventSSDExecution1StartEnd)
		ReturnMessage::HandleCargoEventSSDCallMessage1Return(HandleCargoEventSSDExecution1FinishEnd -> HandleCargoEventSSDCallMessage1ReturnReceivingEnd HandleCargoEventSSDCallMessage1)
		CallMessage::HandleCargoEventSSDCallMessage3(createUnloadEvent HandleCargoEventSSDCallMessage3SendingEnd -> HandleCargoEventSSDExecution2StartEnd)
		ReturnMessage::HandleCargoEventSSDCallMessage3Return(HandleCargoEventSSDExecution2FinishEnd -> HandleCargoEventSSDCallMessage3ReturnReceivingEnd HandleCargoEventSSDCallMessage3)

		Execution::HandleCargoEventSSDExecution1(HandleCargoEventService HandleCargoEventSSDExecution1StartEnd HandleCargoEventSSDExecution1FinishEnd)
		Execution::HandleCargoEventSSDExecution2(HandleCargoEventService HandleCargoEventSSDExecution2StartEnd HandleCargoEventSSDExecution2FinishEnd)

		MessageEnd::HandleCargoEventSSDCallMessage1SendingEnd(CargoTracker HandleCargoEventSSDCallMessage1)
		ExecutionEnd::HandleCargoEventSSDExecution1StartEnd(HandleCargoEventService HandleCargoEventSSDExecution1)
		ExecutionEnd::HandleCargoEventSSDExecution1FinishEnd(HandleCargoEventService HandleCargoEventSSDExecution1)
		MessageEnd::HandleCargoEventSSDCallMessage1ReturnReceivingEnd(CargoTracker HandleCargoEventSSDCallMessage1Return)
		MessageEnd::HandleCargoEventSSDCallMessage3SendingEnd(CargoTracker HandleCargoEventSSDCallMessage3)
		ExecutionEnd::HandleCargoEventSSDExecution2StartEnd(HandleCargoEventService HandleCargoEventSSDExecution2)
		ExecutionEnd::HandleCargoEventSSDExecution2FinishEnd(HandleCargoEventService HandleCargoEventSSDExecution2)
		MessageEnd::HandleCargoEventSSDCallMessage3ReturnReceivingEnd(CargoTracker HandleCargoEventSSDCallMessage3Return)

	}

	Service CargoTrackingSystemSystem {

	}

	Service ThirdPartyServices {

	}

	Service ViewTrackingService {

		[Operation]
		getCargoInfo(trackingId)

		[TempProperty]
		CurrentCargoInfo : String

	}

	Service CreateLocationService {

		[Operation]
		inputLocationInfo(locationCode, name)

	}

	Service CreateVoyageService {

		[Operation]
		createVoyage(number)

	}

	Service ViewCargosService {

		[Operation]
		getAllCargoRoute()
		getCertainCargoRoute(trackingId)

	}

	Service BookCargoService {

		[Operation]
		getAllLocations()
		createNewCargo(trackingId)
		createRouteSpecification(originCode, destinationCode, arrivalDeadline)

		[TempProperty]
		CurrentCargo : Cargo

	}

	Service ChangeCargoDestinationService {

		[Operation]
		selectLocation(locationCode)
		changeDestination(trackingId)

		[TempProperty]
		CurrentLocation : Location

	}

	Service RouteCargoService {

		[Operation]
		routeCargo(trackingId, locationCode)

	}

	Service AddCarrierMovementService {

		[Operation]
		addCarrierMovement(departure, arrival, departureTime, arrivalTime, voyageNum)

	}

	Service HandleCargoEventService {

		[Operation]
		createLoadEvent(completionTime, registrationTime, trackingId)
		createUnloadEvent(completionTime, registrationTime, trackingId)

	}

	Contract ViewTrackingService::getCargoInfo(trackingId : String) : GetCargoInfoResult {

		definition:
			c:Cargo = Cargo.allInstance()->any(c:Cargo | c.TrackingId = trackingId),
			events:Set(HandlingEvent) = HandlingEvent.allInstance()->select(handlingEvent:HandlingEvent | handlingEvent.Handled = c),
			voyages:Set(Voyage) = events->collect(h:HandlingEvent | h.Voyage)

		precondition:
			c.oclIsUndefined() = false

		postcondition:
			let res:GetCargoInfoResult in
			res.oclIsNew() and
			res.Events->includesAll(events) and
			res.Voyages->includesAll(voyages) and
			res.Delivery = c.Delivery and
			result = res
	}

	Contract ViewCargosService::getAllCargoRoute() : Set(RouteSpecification) {

		definition:
			routeSpecifications:Set(RouteSpecification) = Cargo.allInstance()->collect(c:Cargo | c.RouteSpecification)

		precondition:
			routeSpecifications.oclIsUndefined() = false

		postcondition:
			result = routeSpecifications

	}

	Contract ViewCargosService::getCertainCargoRoute(trackingId : String) : GetCertainCargoRouteResult {

		definition:
			c:Cargo = Cargo.allInstance()->any(c:Cargo | c.TrackingId = trackingId)

		precondition:
			c.oclIsUndefined() = false

		postcondition:
			let res:GetCertainCargoRouteResult in
			res.oclIsNew() and
			res.Cargo = c and
			res.Itinerary = c.Itinerary and
			res.RouteSpecification = c.RouteSpecification and
			res.Delivery = c.Delivery and
			result = res
	}

	Contract BookCargoService::getAllLocations() : Set(Location) {

		definition:
			locations:Set(Location) = Location.allInstance()

		precondition:
			locations.oclIsUndefined() = false

		postcondition:
			result = locations
	}

	Contract BookCargoService::createNewCargo(trackingId : String) : Boolean {

		definition:
			c:Cargo = Cargo.allInstance()->any(c:Cargo | c.TrackingId = trackingId)

		precondition:
			c.oclIsUndefined() = true

		postcondition:
			let c:Cargo in
			c.oclIsNew() and
			CurrentCargo = c and
			result = true

	}

	Contract BookCargoService::createRouteSpecification(originCode : String, destinationCode : String, arrivalDeadline : Date) : Boolean {

		definition:
			origin:Location = Location.allInstance()->any(l:Location | l.UnLocode = originCode),
			destination:Location = Location.allInstance()->any(l:Location | l.UnLocode = destinationCode)

		precondition:
			CurrentCargo.oclIsUndefined() = false and
			origin.oclIsUndefined() = false and
			destination.oclIsUndefined() = false

		postcondition:
			let rs:RouteSpecification in
			rs.oclIsNew() and
			rs.Origin = origin and
			rs.Destination = destination and
			rs.ArrivalDeadline = arrivalDeadline and
			CurrentCargo.RouteSpecification = rs and
			result = true
	}

	Contract ChangeCargoDestinationService::selectLocation(locationCode : String) : Boolean {

		definition:
			location:Location = Location.allInstance()->any(l:Location | l.Unlocode = locationCode)

		precondition:
			location.oclIsUndefined() = false

		postcondition:
			CurrentLocation = location and
			result = true
	}

	Contract ChangeCargoDestinationService::changeDestination(trackingId : String) : Boolean {

		definition:
			c:Cargo = Cargo.allInstance()->any(c:Cargo | c.TrackingId = trackingId),
			route:RouteSpecification = c.RouteSpecification,
			delivery:Delivery = c.Delivery

		precondition:
			c.oclIsUndefined() = false and
			route.oclIsUndefined() = false and
			delivery.oclIsUndefined() = false and
			CurrentLocation.oclIsUndefined() = false

		postcondition:
			route.Destination = CurrentLocation and
			delivery.TransportStatus = MISROUTED and
			result = true
	}

	Contract RouteCargoService::routeCargo(trackingId : String, locationCode : String) : Boolean {

		definition:
			c:Cargo = Cargo.allInstance()->any(c:Cargo | c.TrackingId = trackingId),
			location:Location = Location.allInstance()->any(l:Location | l.UnLocode = locationCode),
			itinerary:Itinerary = c.Itinerary,
			legs:Set(Leg) = itinerary.Step,
			cm = CarrierMovement.allInstance()->any(cm:CarrierMovement | cm.ArrivalLocation = location),
			voyage = cm.Voyage

		precondition:
			c.oclIsUndefined() = false and
			location.oclIsUndefined() = false and
			cm.oclIsUndefined() = false and
			voyage.oclIsUndefined() = false

		postcondition:
			let route:RouteSpecification in
			route.oclIsNew() and
			route.Destination = location and
			itinerary.Specification = route
	}

	Contract CreateLocationService::inputLocationInfo(locationCode : String, name : String) : Boolean {

		definition:
			location:Location = Location.allInstance()->any(l:Location | l.UnLocode = locationCode)

		precondition:
			location.oclIsUndefined() = true
		postcondition:
			let location:Location in
			location.oclIsNew() and
			location.UnLocode = locationCode and
			location.Name = name and
			result = true
	}

	Contract CreateVoyageService::createVoyage(number : String) : Boolean {

		definition:
			voyage:Voyage = Voyage.allInstance()->any(v:Voyage | v.VoyageNumber = number)

		precondition:
			voyage.oclIsUndefined() = true
		postcondition:
			let voyage:Voyage in
			voyage.oclIsNew() and
			voyage.VoyageNumber = number and
			result = true
	}

	Contract AddCarrierMovementService::addCarrierMovement(departure : String, arrival : String, departureTime : Date, arrivalTime : Date, voyageNum : String) : Boolean {

		definition:
			dlocation:Location = Location.allInstance()->any(l:Location | l.UnLocode = departure),
			alocation:Location = Location.allInstance()->any(l:Location | l.UnLocode = arrival),
			voyage:Voyage = Voyage.allInstance()->any(v:Voyage | v.VoyageNumber = voyageNum)

		precondition:
			dlocation.oclIsUndefined() = false and
			alocation.oclIsUndefined() = false and
			voyage.oclIsUndefined() = false
		postcondition:
			let cm:CarrierMovement in
			cm.oclIsNew() and
			cm.DepartureLocation = dlocation and
			cm.ArrivalLocation = alocation and
			cm.DepartureTime = departureTime and
			cm.ArrivalTime = arrivalTime and
			cm.Voyage = voyage and
			result = true
	}

	Contract HandleCargoEventService::createLoadEvent(completionTime : Date, registrationTime : Date, trackingId : String) : Boolean {

		definition:
			c:Cargo = Cargo.allInstance()->any(c:Cargo | c.TrackingId = trackingId)

		precondition:
			c.oclIsUndefined() = false

		postcondition:
			let he:HandlingEvent in
			he.oclIsNew() and
			he.OperationType = OperationType::LOAD and
			he.CompletionTime = completionTime and
			he.RegistrationTime = registrationTime and
			he.Handled = c and
			result = true
	}

	Contract HandleCargoEventService::createUnloadEvent(completionTime : Date, registrationTime : Date, trackingId : String) : Boolean {

		definition:
			c:Cargo = Cargo.allInstance()->any(c:Cargo | c.TrackingId = trackingId)

		precondition:
			c.oclIsUndefined() = false

		postcondition:
			let he:HandlingEvent in
			he.oclIsNew() and
			he.OperationType = OperationType::UNLOAD and
			he.CompletionTime = completionTime and
			he.RegistrationTime = registrationTime and
			he.Handled = c and
			result = true
	}

}

DomainModel CargoTrackingSystem {

	Entity Cargo {
		TrackingId : String

		[Refer]
		Users : User* ! Association
		Delivery : Delivery Association
		Events : HandlingEvent* ! Association
		Itinerary : Itinerary Association
		RouteSpecification : RouteSpecification Association
	}

	Entity Location {
		UnLocode : String
		Name : String
	}

	Entity HandlingEvent {
		OperationType : OperationType[LOAD|UNLOAD]
		CompletionTime : Date
		RegistrationTime : Date

		[Refer]
		Handled : Cargo Association
		Location : Location Association
		Voyage : Voyage Association
	}

	Entity CarrierMovement {
		DepartureTime : Date
		ArrivalTime : Date

		[Refer]
		DepartureLocation : Location Association
		ArrivalLocation : Location Association
		Voyage : Voyage ! Association
	}

	Entity User {
		Name : String
		UserID : String
		Role : String

		[Refer]
		Cargos : Cargo* Association
	}

	Entity RouteSpecification {
		ArrivalDeadline : Date

		[Refer]
		Origin : Location Association
		Destination : Location Association
	}

	Entity Itinerary {
		IeneraryNumber : String

		[Refer]
		Step : Leg* Association
		Specification : RouteSpecification Association
	}

	Entity Voyage {
		VoyageNumber : String

		[Refer]
		CarrierMovement : CarrierMovement* Association
	}

	Entity Leg {
		LoadTime : Date
		UnloadTime : Date

		[Refer]
		LoadLocation : Location Association
		UnloadLocation : Location Association
	}

	Entity Delivery {
		TransportStatus : TransportStatus[MISROUTED|NOTMISROUTED]
		Unloaded : Boolean
		EstimatedArrivalDate : Date
		RoutingStatus : String
	}

	Entity GetCargoInfoResult {
		[Refer]
		Delivery : Delivery Association
		Events : HandlingEvent* Association
		Voyages : Voyage* Association
	}

	Entity GetCertainCargoRouteResult {
		[Refer]
		Cargo : Cargo Association
		Delivery : Delivery Association
		RouteSpecification : RouteSpecification Association
		Itinerary : Itinerary Association
	}

}

